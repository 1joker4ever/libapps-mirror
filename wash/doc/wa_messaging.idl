[Constructor]
interface Event {
  void addListener(Function function);
  void removeListener(Function function);

  /**
   * Invokes all registered listeners.
   *
   * Event subclasses override this method to specify the signature of
   * the event.
   *
   * TODO(rginda): In the current codebase there is no fire() event.
   * Instead, lib.Event instances are callable.
   */
  void fire();
};

interface Message {
  /**
   * A name identifying the contents of the message.
   */
  readonly attribute String name;

  /**
   * Message argument.  The type and meaning of this argument is implied by
   * the message name.
   */
  readonly attribute Value arg;

  /**
   * String identifier for this message, to be referenced in one or more
   * replies to this message.
   *
   * The message subject is optional.  Any message sent with a subject REQUIRES
   * the recipient to close out the message.
   */
  readonly attribute String subject;

  /**
   * String referring to a previously received subject, marking this message
   * as a reply to the referenced Message.
   */
  readonly attribute String regarding;

  /**
   * True if this message is still "open", waiting for additional replies.
   */
  readonly attribute Boolean isOpen;

  /**
   * True if this is the final reply to a subject or if this message is not
   * a reply.
   */
  readonly attribute Boolean isFinalReply;

  enum Status {
    /** The message has not been initialized. */
    "init",
    /** An attempt was made to send the message from our end. */
    "sent",
    /** The message was received from somewhere else. */
    "recv",
  };

  readonly attribute Status status;

  /**
   * Send a reply to this message.
   *
   * Only valid on received messages requiring a reply.
   *
   * If onReply is provided, the outgoing message will be assigned a unique
   * subject and each reply will cause the onReply function to be invoked.
   *
   * TODO(rginda):
   *   - If onReply is provided, this should also initialize an onReply event
   *     on the returned message object.
   *   - Consider changing onReply to Boolean needsReply, to cover the case
   *     where the sender knows the message requires a reply, but doesn't yet
   *     know who cares to hear it.
   *   - Automatically close out the local message on the final reply, so the
   *     client code doesn't have to deal with it.
   *
   * The current codebase handles this with a hack in the waitReady() function
   * which creates an "onInput" event on the Message.meta object, but this is
   * awkward.
   */
  Message reply(String name, Value arg, [optional] Function(Message) onReply);

  /**
   * Reply to this message with a message named 'ok', marked as the final
   * reply.
   *
   * Only valid on received messages requiring a reply.
   *
   * The arg parameter will become the arg of the 'ok' message.
   *
   * If onReply is provided, the outgoing message will be assigned a unique
   * subject and each reply will cause the onReply function to be invoked.
   */
  Message closeOk(Value arg, [optional] Function(Message) onReply);

  /**
   * Reply to this message with a message named 'error', marked as the final
   * reply.
   *
   * Only valid on received messages requiring a reply.
   *
   * The arg value of the 'error' message will be a Dictionary containing
   * {"name": name, "arg": arg}.
   *
   * If onReply is provided, the outgoing message will be assigned a unique
   * subject and each reply will cause the onReply function to be invoked.
   */
  Message closeError(String name, Value arg,
                     [optional] Function(Message) onReply);

  /**
   * Stop listening for replies to this message.
   *
   * Only valid on outbound messages requiring a reply.
   *
   * This clears out the bookkeeping require to track replies to an outbound
   * message.  If we have not already received the final reply to this message
   * a warning is generated.
   */
  void close();

  /**
   * Stop listening for replies to this message.
   *
   * Only valid on outbound messages requiring a reply.
   *
   * This is the same as close(), but without the warning.
   */
  void forceClose();

  /**
   * This makes a copy of incomingMessage and sends it as if it were a reply
   * to this message.
   *
   * Only valid on received messages requiring a reply.
   *
   * this is used when you want to act as a broker between two endpoints.
   */
  void forward(Message incomongMessage);

  /**
   * Reply 'ready' to a message.
   *
   * Only valid on received messages requiring a reply.
   *
   * This ties the lifetime of our 'ready' reply to the lifetime of this
   * message, meaning:
   *   - If we send a final reply to this message, we'll expect to
   *     see a final reply to the 'ready' message within a certain timeout.
   *     If that timeout expires, we'll manually stop listening for replies
   *     to the 'ready' message and an log a warning.
   *   - If we receive a final reply to the 'ready' message, we'll send a
   *     final 'ok' reply to this message.
   *
   * Returns the new 'ready' Message we replied with.
   */
  Message replyReady(Value arg);

  /**
   * Sends this message to the remote end and waits for a reply with the
   * name "ready".
   *
   * This is used for long-lived message subjects that require bidirectional
   * communication.
   *
   * If the first reply to this message has the name "ready", then the onReply
   * Function will be invoked with the reply message as its parameter.
   * All subsequent replies will also be passed to the onReply handler.
   * TODO(rginda): This is almost a channel unto itself, in a future redesign,
   * this should probably become a first class object of some sort.
   *
   * If the first reply to this message is not named "ready", then the
   * onError function is invoked with the reply message as its parameter.
   */
  Message waitReady(Function(Message) onReply, Function(Message) onError);
};

/**
 * Notification of an incoming message on a Transport.
 */
interface TransportMessageEvent : Event {
  void fire(Message message)
};

/**
 * Notification that a Transport has disconnected.
 */
interface TransportDisconnectEvent : Event {};

/**
 * General interface over things like chrome.runtime.connect, HTML5 MessagePort,
 * WebSocket, and other mechanisms for passing other JSON-ish data between two
 * endpoints.
 */
interface Transport {
  static void connect(String url, Function(Transport) onComplete);
  static void listen(Function(Transport) onComplete);

  Boolean isConnected;

  TransportMessageEvent onMessage;
  TransportDisconnectEvent onDisconnect;

  void disconnect();
  Message send(Value value);
};

/**
 * Notification that a channel has accepted a handshake from the remote end.
 */
interface HandshakeAcceptEvent : Event {
  /**
   * handshakeMessage - The “handshake” Message that we were offered.
   * readyMessage - The “ready” Message we replied with.
   */
  void fire(Message handshakeMessage, Message readyMessage);
};

/**
 * Notification that a channel has rejected a handshake from the remote end.
 */
interface HandshakeRejectEvent : Event {
  /**
   * handshakeMessage - The “handshake” Message that we were offered.
   * errorMessage - The “ready” Message we replied with.
   */
  void fire(Message handshakeMessage, Message errorMessage);
};

/**
 * Notification that a channel has disconnected.
 *
 * At this layer we have a bit more information about the nature of the
 * disconnection.
 */
interface ChannelDisconnectEvent : Event {
  enum Source {
    "local",     // This end initiated a planned disconnect.
    "remote",    // Remote end initiated a planned disconnect.
    "transport"  // Unexpected disconnect at the Transport layer.
  };

  void fire(Source source, Error error);
};

[Constructor(Transport transport)]
interface Channel {
  /** Used by the originator of a handshake. */
  Message offerHandshake(Value payload,
                         Function(Message) onReply,
                         Function(Error) onError);

  /** Used by the recipient of a handshake. */
  HandshakeAcceptEvent onHandshakeAccept;
  HandshakeRejectEvent onHandshakeReject;
  void acceptHandshake(Message handshakeMessage,
                       Value payload);
  void rejectHandskake(Message handshakeMessage,
                       [optional] String reason);

  /**
   * Overridden by the caller to verify the handshake payload.
   *
   * Default implementation requires a null payload.
   */
  void validateHandshakePayload(Message handshakeMessage);

  Boolean isConnected;

  Event onDisconnect;

  Message sendMessage(Message message);
  void disconnect();
};
